<?php
/**
 * @file
 */

/**
 * Implements hook_init().
 */
function intranet_init() {
  drupal_add_css(drupal_get_path('module', 'intranet') . '/css/intranet.css');
}

/**
 * Implements hook_menu.
 */
function intranet_menu() {
  $items['wordpress'] = array(
    'title' => t('Wordpress Menu mapper'),
    'page callback' => 'intranet_wordpress_mapper',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function intranet_form_alter(&$form, &$form_state, $form_id) {
  // The shoutbox form.
  if ($form_id == 'shoutbox_add_form') {
    $form['wrapper']['submit']['#value'] = t('Submit');
  }

  if ($form_id == 'views_exposed_form' && isset($form['search_api_views_fulltext']) && FALSE) {
    $taxonomies = array('field_shared_type_of_information', 'field_shared_portfolio', 'field_shared_staff_services', 'field_shared_unit_or_school');

    $form['search_api_views_fulltext'] ['#weight'] = -1;
    $form['taxonomy'] = array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#weight' => 0,
      '#id' => 'search-view-taxonomy',
      '#attributes' => array('style' => 'clear: both;'),
    );

    // Wrap the taxonomy filters in a fieldset.
    foreach ($taxonomies as $taxonomy) {
      if (isset($form['#info']['filter-' . $taxonomy])) {
        $form['taxonomy'][$taxonomy] = $form[$taxonomy];
        $form['taxonomy'][$taxonomy]['#title'] = $form['#info']['filter-' . $taxonomy]['label'];
        unset($form[$taxonomy]);
        unset($form['#info']['filter-' . $taxonomy]['label']);
      }
    }
  }
  else if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'search_content') {
    $form['search_api_views_fulltext']['#default_value'] = filter_xss($_REQUEST['search_api_views_fulltext']);
  }
}

/**
 * Implements hook_preprocess_status_messages().
 *
 * Remove the login warning message, anon users can only see the login form anyway.
 */
function intranet_preprocess_status_messages(&$vars) {
  $messages = drupal_get_messages('error');
  foreach ($messages['error'] as $error) {
    if ($error == t('Access denied. You may need to login below or register to access this page.')) {
      continue;
    }
    drupal_set_message($error, 'error');
  }
}

/**
 * Implements hook_views_pre_render().
 */
function intranet_views_pre_render(&$view) {
  // Default to the 5 most popular items on the search form if no
  // keywords were entered.
  $displays = array('page_1', 'page_2');
  if ($view->name == 'search_content' && ($view->current_display == 'page_1' || $view->current_display == 'page_2') && empty($view->exposed_input)) {
    $view->attachment_after = _intranet_popular_content($view->args);
  }
}

/**
 * Helper that executes the popular content view and returns its results.
 */
function _intranet_popular_content($portfolio = NULL) {
  $view = views_get_view('popular_content');
  if (is_object($view)) {
    $view->set_display('block_1');
  }

  if (is_array($portfolio)) {
    $view->set_arguments($portfolio);
  }

  $view->pre_execute();
  $view->execute();

  return $view->render();
}

/**
 * Implements hook_block_info().
 */
function intranet_block_info() {
  return array(
    'intranet_searchapi_form' => array(
      'info' => t('SearchAPI DB Form Block')
    )
  );
}

/**
 * Implements hook_block_view().
 */
function intranet_block_view($delta) {
  return array(
    'subject' => t('SearchAPI Search'),
    'content' => drupal_get_form('intranet_searchapi_form'),
  );
}

/**
 * Helper to return a search form for SearchAPI.
 */
function intranet_searchapi_form() {
  $form['#action'] = 'search';
  $form['#method'] = 'GET';
  $form['#attributes'] = array('id' => array('searchapi-form'), 'class' => array('search-form'));

  $form['basic'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('container-inline')),
  );

  $form['basic']['search_api_views_fulltext'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#maxlength' => 128,
    '#attributes' => array(
      'title' => t('Enter the terms you wish to search for.'),
      'placeholder' => t('Search'),
    ),
  );

  $form['basic']['field_shared_type_of_information'] = array(
    '#type' => 'hidden',
    '#value' => 'All'
  );
  $form['basic']['field_shared_portfolio'] = array(
    '#type' => 'hidden',
    '#value' => 'All',
  );
  $form['basic']['field_shared_staff_services'] = array(
    '#type' => 'hidden',
    '#value' => 'All',
  );
  $form['basic']['field_shared_unit_or_school'] = array(
    '#type' => 'hidden',
    '#value' => 'All',
  );

  $form['basic']['submit'] = array(
    '#type' => 'submit',
    '#value' =>  t('Search'),
  );

  return $form;
}

/*
 * Helper that redirects wordpress menu links to Drupal pages.
 */
function intranet_wordpress_mapper() {
  $post_id = intval($_REQUEST['page_id']);

  // No post id? Check the path aliases....
  if (empty($post_id)) {

    // Is this an actual path alias? Remove 'wordpress' from the
    // start of the array.
    $path = arg();
    @array_shift($path);

    // If there is anything left, that should be our new alias.
    if (count($path)) {
      drupal_goto(implode('/', $path));
    }
    else {
      // Nothing. Spit out a 404.
      return drupal_not_found();
    }
  }

  // Load the current Drupal node ID for this WP post_id.
  $nid = db_select('migrate_map_staffintranetpage', 'm')->fields('m', array('destid1'))->condition('sourceid1', $post_id)->execute()->fetchField();

  // Not found? Pwaaarp.
  if (empty($nid)) {
    return drupal_not_found();
  }

  // Go look at the node.
  drupal_goto('node/' . $nid);
}

// hook_node_access
// Several pages are accessible by site-admin only
function intranet_node_access($node, $op, $account) {
	$accepted_role = "site-admin";

	$node_list = array(
		'1657',
		'1654',
		'1655',
		'1660',
		
		'1653',
		'1652',
		'1895',
		'1869',

		'1659',
		'1874',
		'1878',
		'1879',

		'1877',
		'1876',
		'1656',
		'1875'
	);

	if($op == 'update') {
		if(isset($account->roles)) {
			if(is_array($account->roles)) {
				if(!in_array($accepted_role, $account->roles)) {
					if(isset($node->nid)) {
      			if(in_array($node->nid, $node_list)) {
							return NODE_ACCESS_DENY;
      			}
    			}
				}	
			}
		}
	}
}
