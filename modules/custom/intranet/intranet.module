<?php
/**
 * @file
 */

/**
 * Implements hook_init().
 */
function intranet_init() {
  drupal_add_css(drupal_get_path('module', 'intranet') . '/css/intranet.css');
	drupal_add_js(drupal_get_path('module', 'intranet') . '/js/intranet.js');
}

/**
 * Implements hook_menu.
 */
function intranet_menu() {
  $items['wordpress'] = array(
    'title' => t('Wordpress Menu mapper'),
    'page callback' => 'intranet_wordpress_mapper',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function intranet_form_alter(&$form, &$form_state, $form_id) {

  // The shoutbox form.
  if ($form_id == 'shoutbox_add_form') {
    $form['wrapper']['submit']['#value'] = t('Submit');
  }

	if ($form_id == 'user_login') {
		//test
		//$msg = "There is currently an error with the staff intranet that is preventing staff from logging in. The web team in the Arts Business Centre are working to resolve this. Apologies for the inconvenience.";
		//drupal_set_message(t($msg));

		// Ldap checking will be executed first, then the following submit handler
		// If authentication is successfully, the submit handler will be called. Otherwise, it will not be called.
		array_unshift($form['#submit'], '_intranet_login_submit');	
	}
  else if ($form_id == 'views_exposed_form' && isset($form['search_api_views_fulltext']) && FALSE) {
    //$taxonomies = array('field_shared_type_of_information', 'field_shared_portfolio', 'field_shared_staff_services', 'field_shared_unit_or_school');
    // field_shared_unit_or_school removed requested by Sarah
    $taxonomies = array('field_shared_type_of_information', 'field_shared_portfolio', 'field_shared_staff_services');

    $form['search_api_views_fulltext'] ['#weight'] = -1;
    $form['taxonomy'] = array(
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#weight' => 0,
      '#id' => 'search-view-taxonomy',
      '#attributes' => array('style' => 'clear: both;'),
    );

    // Wrap the taxonomy filters in a fieldset.
    foreach ($taxonomies as $taxonomy) {
      if (isset($form['#info']['filter-' . $taxonomy])) {
        $form['taxonomy'][$taxonomy] = $form[$taxonomy];
        $form['taxonomy'][$taxonomy]['#title'] = $form['#info']['filter-' . $taxonomy]['label'];
        unset($form[$taxonomy]);
        unset($form['#info']['filter-' . $taxonomy]['label']);
      }
    }
  }
  else if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'search_content') {
    $form['search_api_views_fulltext']['#default_value'] = filter_xss($_REQUEST['search_api_views_fulltext']);
  }
	else if($form_id == 'views_exposed_form' && isset($form['secondary'])) {
		// Always collapsed requested by Sarah
		// https://drupal.org/node/1983960	
  	$form['secondary']['#collapsed'] = TRUE;  
  }
	else if($form_id == 'page_node_form') {
		//http://stackoverflow.com/questions/18774263/drupal-7-hide-certain-form-fields-of-a-content-edit-form-depending-on-the-cont
		// Hide some structure fields	
		$form['field_shared_staff_services']['#access'] = FALSE;
		$form['field_shared_type_of_information']['#access'] = FALSE;
		$form['field_shared_unit_or_school']['#access'] = FALSE;
		$form['field_shared_portfolio']['#access'] = FALSE;
	}
	else if($form_id == 'news_node_form') {
		$form['field_shared_tags']['#access'] = FALSE;
	}
	else if($form_id == 'webform_client_form_1989') {
		// Research cluster form at production intranet 
		global $user;

		$email = $user->mail;
		$display_name = _intranet_get_display_name($user->uid);

		$form['submitted']['email']['#default_value'] = $email;
		$form['submitted']['name']['#default_value'] = $display_name;
	}
	else if($form_id == 'webform_client_form_2010') {
		// EOI and job interview staff workshops webform
		drupal_add_css(drupal_get_path('module', 'intranet') . '/css/hide_staff_interview.css');	
	}		


}


/**
 * Implements hook_theme_registery_alter().
 */
//https://www.drupal.org/node/715160
function intranet_theme_registry_alter(&$theme_registry) {
  // Defined path to current module.
  $module_path = drupal_get_path('module', 'intranet');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);

  // Itterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
		// If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
	    // Alter the theme path and template elements.
	    $theme_registry[$key]['theme path'] = $module_path;
	    $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
	    $theme_registry[$key]['type'] = 'module';
    }
  }
}


/**
 * Implements hook_preprocess_status_messages().
 *
 * Remove the login warning message, anon users can only see the login form anyway.
 */
function intranet_preprocess_status_messages(&$vars) {
  $messages = drupal_get_messages('error');
  if (!empty($messages['error'])) {
    $errors = $messages['error'];
    foreach ($errors as $error) {
      if ($error == t('Access denied. You may need to login below or register to access this page.')) {
        continue;
      }
      drupal_set_message($error, 'error');
    }
  }
}


/**
 * Implements hook_views_pre_render().
 */
function intranet_views_pre_render(&$view) {
  // Default to the 5 most popular items on the search form if no
  // keywords were entered.
  $displays = array('page_1', 'page_2');
  if ($view->name == 'search_content' && ($view->current_display == 'page_1' || $view->current_display == 'page_2') && empty($view->exposed_input)) {
    $view->attachment_after = _intranet_popular_content($view->args);
  }
}

/**
 * Helper that executes the popular content view and returns its results.
 */
function _intranet_popular_content($portfolio = NULL) {
  $view = views_get_view('popular_content');
  if (is_object($view)) {
    $view->set_display('block_1');
  }

  if (is_array($portfolio)) {
    $view->set_arguments($portfolio);
  }

  $view->pre_execute();
  $view->execute();

  return $view->render();
}

/**
 * Implements hook_block_info().
 */
function intranet_block_info() {
  return array(
    'intranet_searchapi_form' => array(
      'info' => t('SearchAPI DB Form Block')
    )
  );
}

/**
 * Implements hook_block_view().
 */
function intranet_block_view($delta) {
  return array(
    'subject' => t('SearchAPI Search'),
    'content' => drupal_get_form('intranet_searchapi_form'),
  );
}


/**
 * Implements hook_menu_local_tasks_alter() to unset unwanted tabs
 */
function intranet_menu_local_tasks_alter(&$data) {
	global $user;

	//test
	//dsm($data);

	// If it contains unimelb staff, hide edit tab. 
	// No care other roles.
	if(
			!(in_array('site admin', $user->roles) ||
			in_array('admin', $user->roles) ||
			in_array('editor', $user->roles) ||
			in_array('arts staff', $user->roles)) 
	) {
  	foreach ($data['tabs'][0]['output'] as $key => $value) {
    	if (trim($value['#link']['path']) === "user/%/edit") {
      	unset($data['tabs'][0]['output'][$key]);
				break;
    	}
  	}
	}
	
	// - Remove view, revisions, search tabs for non site admin, no node page
	// - Remove media tab in dashboard page
	if(!in_array('site admin', $user->roles)) {
		foreach ($data['tabs'][0]['output'] as $key => $value) {
			$path = trim($value['#link']['path']);

      if (
				$path === "node/%/view" ||
				$path === "node/%/revisions" ||
				$path === "search/node/%" ||
				$path === "search/user/%" ||
				$path === "admin/content/dashboard/my" ||
				$path === "admin/content/dashboard/media"
			) {
        unset($data['tabs'][0]['output'][$key]);
      }
    }	
	}
}



/**
 * Helper to return a search form for SearchAPI.
 */
function intranet_searchapi_form() {
  $form['#action'] = '/search';
  $form['#method'] = 'GET';
  $form['#attributes'] = array('id' => array('searchapi-form'), 'class' => array('search-form'));

  $form['basic'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('container-inline')),
  );

  $form['basic']['search_api_views_fulltext'] = array(
    '#type' => 'textfield',
    '#size' => 12,
    '#maxlength' => 128,
    '#attributes' => array(
      'title' => t('Enter the terms you wish to search for'),
      'placeholder' => t('Search'),
    ),
  );

  $form['basic']['field_shared_type_of_information'] = array(
    '#type' => 'hidden',
    '#value' => 'All'
  );
  $form['basic']['field_shared_portfolio'] = array(
    '#type' => 'hidden',
    '#value' => 'All',
  );
  $form['basic']['field_shared_staff_services'] = array(
    '#type' => 'hidden',
    '#value' => 'All',
  );

  /*
  Removed requested by Sarah
  $form['basic']['field_shared_unit_or_school'] = array(
    '#type' => 'hidden',
    '#value' => 'All',
  );
  */

  $form['basic']['submit'] = array(
    '#type' => 'submit',
    '#value' =>  t('Go'),
    '#name' => '',
  );

  
  // Searchbox in dropdown menu and search box on the page yeild different results
  // Workaround: https://drupal.org/node/821932#comment-6017528
  // Does it has negative effect?
  $form['#after_build'][] = '_intranet_form_modify';

  return $form;
}


function _intranet_form_modify($form){
  unset($form['form_token']);
  unset($form['form_build_id']);
  unset($form['form_id']);

  return $form;
}


/*
 * Helper that redirects wordpress menu links to Drupal pages.
 */
function intranet_wordpress_mapper() {
  $post_id = intval($_REQUEST['page_id']);

  // No post id? Check the path aliases....
  if (empty($post_id)) {

    // Is this an actual path alias? Remove 'wordpress' from the
    // start of the array.
    $path = arg();
    @array_shift($path);

    // If there is anything left, that should be our new alias.
    if (count($path)) {
      drupal_goto(implode('/', $path));
    }
    else {
      // Nothing. Spit out a 404.
      return drupal_not_found();
    }
  }

  // Load the current Drupal node ID for this WP post_id.
  $nid = db_select('migrate_map_staffintranetpage', 'm')->fields('m', array('destid1'))->condition('sourceid1', $post_id)->execute()->fetchField();

  // Not found? Pwaaarp.
  if (empty($nid)) {
    return drupal_not_found();
  }

  // Go look at the node.
  drupal_goto('node/' . $nid);
}

/**
 * Implements hook_node_access().
 */
function intranet_node_access($node, $op, $account) {
  // Anyone can access the 'i want access' webform.
  if ($op == 'view' && !empty($node->nid) && $node->nid == 1936) {
    return NODE_ACCESS_ALLOW;
  }

  // Several pages should be accessible by site-admins only.
	/*
  $site_admin_node_list = array(
    '1657',
    '1654',
    '1655',
    '1660',

    '1653',
    '1652',
    '1895',
    '1869',

    '1659',
    '1874',
    '1878',
    '1879',

    '1877',
    '1876',
    '1656',
    '1875'
  );
	*/

	// http://tracker.dev.arts.unimelb.edu.au/node/181#comment-800
	// NOTE: disabled due to new melbourne model
	$site_admin_node_list = array(
    '1659',
		'1402',
		'1655',
		'1869',
		
		'2053',
		'1878',
		'2048'	
  );

  // If updating a node in the list and anon or not a site-admin, reject access.
	$accepted_role = 'site admin';
  if ($op == 'update' && !empty($node->nid) && in_array($node->nid, $site_admin_node_list)) {
    if (empty($account->roles) || !in_array($accepted_role, $account->roles)) {
      return NODE_ACCESS_DENY;
    }
  }
}

function intranet_preprocess_page(&$variables) {
	global $user;

	if(!in_array('arts staff', $user->roles) && !in_array('admin', $user->roles) && !in_array('site admin', $user->roles)) {
		$module_path = drupal_get_path('module', 'intranet');
		$hide_dropdown_menu_css = $module_path. '/css/hide_dropdown_menu.css';
		drupal_add_css($hide_dropdown_menu_css);
	}
}

/*
//Custom login submit. User is already successfully authenticated.
function _intranet_login_submit($form, &$form_state) {
	global $user;

	if(_intranet_is_login_via_ldap($user)) {
		if(in_array('unimelb staff', $user->roles) || in_array('arts staff', $user->roles)) {
			// Role is already assigned, so continue.
	
			//test
			//$username = $form_state['complete form']['name']['#value'];
      //$password = $form_state['complete form']['pass']['#value'];
			//
      //$auth = $username. " | ". $password;
      //watchdog("my_ldap: already assign role", '<pre>' . print_r($auth, true) . '</pre>');
		}
		else {
			$username = $form_state['complete form']['name']['#value'];
			$password = $form_state['complete form']['pass']['#value'];

			//test
			//$auth = $username. " | ". $password; 
			//watchdog("my_ldap: no role yet", '<pre>' . print_r($auth, true) . '</pre>');

			$department_nums = _intranet_get_department_nums($username);
			$allowed_department_nums = _intranet_allowed_department_nums();
			$inter_array = array_intersect($department_nums, $allowed_department_nums);
			if(count($inter_array) >= 1) {
				// Assign role: 'arts staff'
				$role_id = _intranet_get_role_id_by_name('arts staff');
				_intranet_create_users_roles_entry($user->uid, $role_id);
			} else {
				// Assign role: 'unimelb staff'
				$role_id = _intranet_get_role_id_by_name('unimelb staff');
        _intranet_create_users_roles_entry($user->uid, $role_id);					
			}
		}
	}
	else {
		// Login via internal Drupal account
	}
}
*/


function _intranet_login_submit($form, &$form_state) {
	global $user;

	if(_intranet_is_login_via_ldap($user)) {
		if(in_array('arts staff', $user->roles)) {
			// No change
		
			//test
      //$username = $form_state['complete form']['name']['#value'];
      //$password = $form_state['complete form']['pass']['#value'];
      //
      //$auth = $username. " | ". $password;
      //watchdog("my_ldap: already assign role", '<pre>' . print_r($auth, true) . '</pre>');

		}
		else if(in_array('unimelb staff', $user->roles)) {
			// Potential new arts staff from other departments

			//test
      //$username = $form_state['complete form']['name']['#value'];
      //$password = $form_state['complete form']['pass']['#value'];
      //
      //$auth = $username. " | ". $password;
      //watchdog("my_ldap: already assign role", '<pre>' . print_r($auth, true) . '</pre>');

			// NOTE: duplicated code as below, need to refactor it.
			$username = $form_state['complete form']['name']['#value'];
      $password = $form_state['complete form']['pass']['#value'];

      $department_nums = _intranet_get_department_nums($username);
      $allowed_department_nums = _intranet_allowed_department_nums();
      $inter_array = array_intersect($department_nums, $allowed_department_nums);
      if(count($inter_array) >= 1) {
        // Assign role: 'arts staff'
        $role_id = _intranet_get_role_id_by_name('arts staff');
        _intranet_create_users_roles_entry($user->uid, $role_id);
      } else {
				// Do nothing.
      }
		}
		else if(!in_array('arts staff', $user->roles) && !in_array('unimelb staff', $user->roles)) {
			// Very first time visit
			$username = $form_state['complete form']['name']['#value'];
      $password = $form_state['complete form']['pass']['#value'];

      //test
      //$auth = $username. " | ". $password;
      //watchdog("my_ldap: no role yet", '<pre>' . print_r($auth, true) . '</pre>');

      $department_nums = _intranet_get_department_nums($username);
      $allowed_department_nums = _intranet_allowed_department_nums();
      $inter_array = array_intersect($department_nums, $allowed_department_nums);
      if(count($inter_array) >= 1) {
        // Assign role: 'arts staff'
        $role_id = _intranet_get_role_id_by_name('arts staff');
        _intranet_create_users_roles_entry($user->uid, $role_id);
      } else {
        // Assign role: 'unimelb staff'
        $role_id = _intranet_get_role_id_by_name('unimelb staff');
        _intranet_create_users_roles_entry($user->uid, $role_id);
      }
		}
		else {
			dsm('Staff instranet dsm error.');
		}
	}
	else {
		// Login via internal Drupal account
	}	

}


function _intranet_is_login_via_ldap($account) {
  $condi = false;
  if( isset($account->data['ldap_authentication']['init']['dn']) ) {
    if( !empty($account->data['ldap_authentication']['init']['dn']) ) {
      $condi = true;
    }
  }

  return $condi;
}

function _intranet_get_department_nums($username) {
	global $conf;
	$return_department_num_array = array();

	if(isset($conf['my_ldap_master_config']['username'])) {
		$ldap_master_username = $conf['my_ldap_master_config']['username'];
  	$ldap_master_password = $conf['my_ldap_master_config']['password'];
	}
	else {
		drupal_set_message(t('Ldap fails to bind. Please check master_ldap_username & master_ldap_username are in settings.php'));
	}

  $ldap_url = 'ldaps://ad1.unimelb.edu.au';
  $ldap_port = 636;

	$ldap_conn = ldap_connect($ldap_url, $ldap_port) or die("Could not connect to LDAP server.");
  ldap_set_option($ldap_conn, LDAP_OPT_REFERRALS, 0);
  ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, 3);

  // Bind
  $ldap_dn_account = "cn=$ldap_master_username,ou=Local Accounts,ou=100,ou=Business Units,dc=unimelb,dc=edu,dc=au";
  $ldap_dn_search = "dc=unimelb,dc=edu,dc=au";

	if($ldap_conn) {
  	try {
    	$ldap_bind = ldap_bind($ldap_conn, $ldap_dn_account, $ldap_master_password);
    }
    catch(Exception $e) {
    	print_r($e);
    	drupal_set_message(t('ldap_bind exception'), 'error');  
  	}
	}

	if($ldap_bind) {
  	try {
    	$filter = "(cn=$username)";
      $ldap_search_res = ldap_search($ldap_conn, $ldap_dn_search, $filter);
      $info = ldap_get_entries($ldap_conn, $ldap_search_res);
                                        
      if(isset($info['count'])) {
      	if($info['count'] >= 1) {
					if($info[0]['uomdepartmentnumbers']['count'] >= 1) {
						$index = 0;
						while(isset($info[0]['uomdepartmentnumbers'][$index])) {
							$return_department_num_array[] = $info[0]['uomdepartmentnumbers'][$index];
							++$index;
						}
					}     
				}
        else {
        	drupal_set_message(t('Unable to find username in the system'), 'error');
        }       
      }       
    }
    catch(Exception $e) {
    	print_r($e);
      drupal_set_message(t('Get personal info exception'), 'error');  
    }
	}

	return $return_department_num_array;
}


function _intranet_allowed_department_nums() {
	/*
		100|Arts
		110|Asia Institute
		106|Culture and Communcation
		131|Historical and Philosophical Studies
		119|Languages and Linguistics
		166|Social and Political Sciences
		114|Unknown
		151|Unknown
	*/

	return array(
		'100',
		'110',		
		'106',
		'131',
		'119',
		'166',
		'114',
		'151'
	);
}

function _intranet_get_role_id_by_name($name)
{
  $role_id = "";

  $query = db_select('role', 'r');
  $query->fields('r', array('rid'));
  $query->condition('name', $name);
  $query->orderBy('rid');
  $query->range(0, 1);

  $result = $query->execute();
  $record = $result->fetchAssoc();
  $role_id = $record['rid'];

  return $role_id;
}

function _intranet_create_users_roles_entry($uid, $role_id) {
	db_insert('users_roles')
    ->fields(
        array(
          'uid' => $uid,
          'rid' => $role_id,
        )
    )
  ->execute();
}

function _intranet_get_display_name($uid) {
	$sql = " 
		SELECT 
			f.field_profile_display_name_value 
		FROM 
			{field_data_field_profile_display_name} f
		WHERE
			f.entity_id = :uid
	";
	
	$result = db_query($sql, array(':uid' => $uid));
	$record = $result->fetchObject();
	$display_name = $record->field_profile_display_name_value;
	
	return $display_name;
}

/*
	My custom print_r
*/
function _intranet_my_print_r($entity) {
	echo "<pre>";
	print_r($entity);
	echo "</pre>";
	die;
}
